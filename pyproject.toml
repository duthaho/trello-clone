[project]
name = "trello-clone"
version = "0.1.0"
description = "SaaS Task Management Platform - A Trello-inspired project management system"
authors = [
    {name = "Your Team", email = "team@example.com"}
]
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}

dependencies = [
    # Web Framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "python-multipart>=0.0.6",
    
    # Database
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "pymysql>=1.1.0",
    "cryptography>=41.0.0",  # For MySQL connection
    
    # Async Database
    "asyncpg>=0.29.0",
    "aiomysql>=0.2.0",
    
    # Cache & Message Queue
    "redis>=5.0.0",
    "celery>=5.3.0",
    "kombu>=5.3.0",
    
    # Authentication & Security
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-dotenv>=1.0.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "email-validator>=2.1.0",
    
    # Observability
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0",
    "opentelemetry-instrumentation-sqlalchemy>=0.42b0",
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
    
    # AWS SDK
    "boto3>=1.29.0",
    "botocore>=1.32.0",
    
    # Utilities
    "python-dateutil>=2.8.2",
    "pytz>=2023.3",
    "httpx>=0.25.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-env>=1.1.0",
    "coverage>=7.3.0",
    
    # Linting & Formatting
    "ruff>=0.1.0",
    "black>=23.11.0",
    "mypy>=1.7.0",
    "isort>=5.12.0",
    
    # Security
    "bandit>=1.7.5",
    "safety>=2.3.0",
    
    # Type Stubs
    "types-python-dateutil>=2.8.0",
    "types-redis>=4.6.0",
    "types-passlib>=1.7.0",
    
    # Development Tools
    "ipython>=8.17.0",
    "ipdb>=0.13.13",
    "pre-commit>=3.5.0",
]

[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["src"]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
    "-v",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "contract: Contract tests",
    "slow: Slow running tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.ruff_cache
  | \.venv
  | venv
  | build
  | dist
  | alembic/versions
)/
'''

[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "venv",
    "alembic/versions",
    "build",
    "dist",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
strict_optional = true
ignore_missing_imports = false

[[tool.mypy.overrides]]
module = [
    "celery.*",
    "kombu.*",
    "redis.*",
    "boto3.*",
    "botocore.*",
]
ignore_missing_imports = true

[tool.isort]
profile = "black"
line_length = 100
skip_gitignore = true
known_first_party = ["src"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
