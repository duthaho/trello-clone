version: '3.8'

services:
  # API Service
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: trello-api
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=mysql+aiomysql://trello:trello_pass@mysql:3306/trello_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - ENVIRONMENT=development
    depends_on:
      - mysql
      - redis
    volumes:
      - ../src:/app/src
    networks:
      - trello-network
    restart: unless-stopped

  # Celery Worker
  worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: trello-worker
    command: celery -A src.infrastructure.messaging.celery.app worker --loglevel=info
    environment:
      - DATABASE_URL=mysql+aiomysql://trello:trello_pass@mysql:3306/trello_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - ENVIRONMENT=development
    depends_on:
      - mysql
      - redis
    volumes:
      - ../src:/app/src
    networks:
      - trello-network
    restart: unless-stopped

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: trello-mysql
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root_pass
      - MYSQL_DATABASE=trello_db
      - MYSQL_USER=trello
      - MYSQL_PASSWORD=trello_pass
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - trello-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    container_name: trello-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - trello-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: trello-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - trello-network
    restart: unless-stopped

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: trello-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - trello-network
    restart: unless-stopped

volumes:
  mysql-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  trello-network:
    driver: bridge
